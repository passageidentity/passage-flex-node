/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTransactionAuthenticateRequest,
  CreateTransactionResponse,
  Model400Error,
  Model401Error,
  Model403Error,
  Model404Error,
  Model409Error,
  Model500Error,
  RegisterTransactionArgs,
} from '../models/index';
import {
    CreateTransactionAuthenticateRequestFromJSON,
    CreateTransactionAuthenticateRequestToJSON,
    CreateTransactionResponseFromJSON,
    CreateTransactionResponseToJSON,
    Model400ErrorFromJSON,
    Model400ErrorToJSON,
    Model401ErrorFromJSON,
    Model401ErrorToJSON,
    Model403ErrorFromJSON,
    Model403ErrorToJSON,
    Model404ErrorFromJSON,
    Model404ErrorToJSON,
    Model409ErrorFromJSON,
    Model409ErrorToJSON,
    Model500ErrorFromJSON,
    Model500ErrorToJSON,
    RegisterTransactionArgsFromJSON,
    RegisterTransactionArgsToJSON,
} from '../models/index';

export interface CreateAuthenticateTransactionRequest {
    appId: string;
    createTransactionAuthenticateRequest: CreateTransactionAuthenticateRequest;
}

export interface CreateRegisterTransactionRequest {
    appId: string;
    registerTransactionArgs: RegisterTransactionArgs;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Create a transaction to start a user\'s authentication process
     */
    async createAuthenticateTransactionRaw(requestParameters: CreateAuthenticateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTransactionResponse>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling createAuthenticateTransaction().'
            );
        }

        if (requestParameters['createTransactionAuthenticateRequest'] == null) {
            throw new runtime.RequiredError(
                'createTransactionAuthenticateRequest',
                'Required parameter "createTransactionAuthenticateRequest" was null or undefined when calling createAuthenticateTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/transactions/authenticate`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTransactionAuthenticateRequestToJSON(requestParameters['createTransactionAuthenticateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTransactionResponseFromJSON(jsonValue));
    }

    /**
     * Create a transaction to start a user\'s authentication process
     */
    async createAuthenticateTransaction(requestParameters: CreateAuthenticateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTransactionResponse> {
        const response = await this.createAuthenticateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a transaction to start a user\'s registration process
     */
    async createRegisterTransactionRaw(requestParameters: CreateRegisterTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTransactionResponse>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling createRegisterTransaction().'
            );
        }

        if (requestParameters['registerTransactionArgs'] == null) {
            throw new runtime.RequiredError(
                'registerTransactionArgs',
                'Required parameter "registerTransactionArgs" was null or undefined when calling createRegisterTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/transactions/register`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterTransactionArgsToJSON(requestParameters['registerTransactionArgs']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTransactionResponseFromJSON(jsonValue));
    }

    /**
     * Create a transaction to start a user\'s registration process
     */
    async createRegisterTransaction(requestParameters: CreateRegisterTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTransactionResponse> {
        const response = await this.createRegisterTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
